<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\ethernet_bootloader.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\ethernet_bootloader.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050041: Last Updated: Fri Oct 02 16:36:30 2015
<BR><P>
<H3>Maximum Stack Usage =        164 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
sbl_main &rArr; enter_isp &rArr; isp_cmd_loop &rArr; exec_isp_cmd &rArr; read &rArr; getline &rArr; emac_getline &rArr; CopyFromFrame_EMAC
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1]">Reset_Handler</a>
 <LI><a href="#[2]">Undef_Handler</a>
 <LI><a href="#[3]">SWI_Handler</a>
 <LI><a href="#[4]">PAbt_Handler</a>
 <LI><a href="#[5]">DAbt_Handler</a>
 <LI><a href="#[6]">IRQ_Handler</a>
 <LI><a href="#[7]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">Undef_Handler</a><BR>
 <LI><a href="#[3]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SWI_Handler</a><BR>
 <LI><a href="#[4]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PAbt_Handler</a><BR>
 <LI><a href="#[5]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">DAbt_Handler</a><BR>
 <LI><a href="#[6]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">IRQ_Handler</a><BR>
 <LI><a href="#[7]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5]">DAbt_Handler</a> from lpc2300.o(RESET) referenced from lpc2300.o(RESET)
 <LI><a href="#[7]">FIQ_Handler</a> from lpc2300.o(RESET) referenced from lpc2300.o(RESET)
 <LI><a href="#[6]">IRQ_Handler</a> from lpc2300.o(RESET) referenced from lpc2300.o(RESET)
 <LI><a href="#[4]">PAbt_Handler</a> from lpc2300.o(RESET) referenced from lpc2300.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from lpc2300.o(RESET) referenced from lpc2300.o(RESET)
 <LI><a href="#[3]">SWI_Handler</a> from lpc2300.o(RESET) referenced from lpc2300.o(RESET)
 <LI><a href="#[2]">Undef_Handler</a> from lpc2300.o(RESET) referenced from lpc2300.o(RESET)
 <LI><a href="#[8]">sbl_main</a> from sbl_main.o(.text) referenced from lpc2300.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>init_PLL</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, board_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[d]"></a>init_MAM</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, board_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[e]"></a>init_PCB</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, board_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[f]"></a>VectorsRemap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[9]"></a>board_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, board_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = board_init &rArr; Timer_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_init
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Delay
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorsRemap
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_PCB
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MAM
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_PLL
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_isp
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[10]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a (via Veneer)
</UL>

<P><STRONG><a name="[32]"></a>__ARM_common_call_via_r0</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isp_iap.o(i.__ARM_common_call_via_r0))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_cmd
</UL>

<P><STRONG><a name="[39]"></a>__ARM_common_call_via_r4</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isp_iap.o(i.__ARM_common_call_via_r4))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_user_code
</UL>

<P><STRONG><a name="[29]"></a>__ARM_common_call_via_r6</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isp_iap.o(i.__ARM_common_call_via_r6))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_entry
</UL>

<P><STRONG><a name="[15]"></a>enter_isp</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sbl_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = enter_isp &rArr; isp_cmd_loop &rArr; exec_isp_cmd &rArr; read &rArr; getline &rArr; emac_getline &rArr; CopyFromFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_cmd_loop
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_comms
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_handshake
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbl_main
</UL>

<P><STRONG><a name="[8]"></a>sbl_main</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sbl_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = sbl_main &rArr; enter_isp &rArr; isp_cmd_loop &rArr; exec_isp_cmd &rArr; read &rArr; getline &rArr; emac_getline &rArr; CopyFromFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_code_present
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_user_code
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_isp_entry_pin
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_isp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>init_comms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = init_comms &rArr; init_emac &rArr; write_PHY
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_emac
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_isp
</UL>

<P><STRONG><a name="[1d]"></a>getline</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, comms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = getline &rArr; emac_getline &rArr; CopyFromFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_getline
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_ram
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_isp
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_cmd_loop
</UL>

<P><STRONG><a name="[1f]"></a>sendline_crlf</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, comms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sendline_crlf &rArr; emac_sendline_crlf &rArr; chksum16
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_sendline_crlf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_mem
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blank_check
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_sector
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_cmd
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_ram
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_isp
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_cmd_loop
</UL>

<P><STRONG><a name="[17]"></a>comm_handshake</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = comm_handshake &rArr; emac_handshake &rArr; emac_getline &rArr; CopyFromFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_handshake
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_isp
</UL>

<P><STRONG><a name="[27]"></a>is_div</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, isp_iap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
</UL>

<P><STRONG><a name="[4c]"></a>__rt_div0</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isp_iap.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>str_cmp</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = str_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_isp
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_handshake
</UL>

<P><STRONG><a name="[26]"></a>a_to_i</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = a_to_i
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_ram
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
</UL>

<P><STRONG><a name="[22]"></a>i_to_a</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = i_to_a
</UL>
<BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_mem
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blank_check
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_sector
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_cmd
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_ram
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_cmd_loop
</UL>

<P><STRONG><a name="[23]"></a>run_isp</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, isp_iap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_cmp
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getline
</UL>

<P><STRONG><a name="[25]"></a>param_check</STRONG> (Thumb, 196 bytes, Stack size 44 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = param_check &rArr; a_to_i
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_to_i
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_div
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_mem
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blank_check
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_sector
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_cmd
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_ram
</UL>

<P><STRONG><a name="[28]"></a>iap_entry</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iap_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r6
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_mem
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blank_check
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_sector
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_code_present
</UL>

<P><STRONG><a name="[2b]"></a>decode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, isp_iap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uudecode
</UL>

<P><STRONG><a name="[2a]"></a>uudecode</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uudecode
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_ram
</UL>

<P><STRONG><a name="[2d]"></a>encode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, isp_iap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuencode
</UL>

<P><STRONG><a name="[2c]"></a>uuencode</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uuencode
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[2e]"></a>write_to_ram</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = write_to_ram &rArr; getline &rArr; emac_getline &rArr; CopyFromFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uudecode
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_to_i
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getline
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
</UL>

<P><STRONG><a name="[2f]"></a>read</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = read &rArr; getline &rArr; emac_getline &rArr; CopyFromFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuencode
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_cmp
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getline
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
</UL>

<P><STRONG><a name="[30]"></a>go_cmd</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = go_cmd &rArr; param_check &rArr; a_to_i
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_DeInit
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r0
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
</UL>

<P><STRONG><a name="[33]"></a>unlock</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = unlock &rArr; param_check &rArr; a_to_i
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
</UL>

<P><STRONG><a name="[34]"></a>prepare_sector</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = prepare_sector &rArr; param_check &rArr; a_to_i
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_entry
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
</UL>

<P><STRONG><a name="[35]"></a>copy</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = copy &rArr; param_check &rArr; a_to_i
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_entry
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
</UL>

<P><STRONG><a name="[36]"></a>erase</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = erase &rArr; param_check &rArr; a_to_i
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_entry
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
</UL>

<P><STRONG><a name="[37]"></a>blank_check</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = blank_check &rArr; param_check &rArr; a_to_i
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_entry
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
</UL>

<P><STRONG><a name="[38]"></a>compare_mem</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = compare_mem &rArr; param_check &rArr; a_to_i
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_entry
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
</UL>

<P><STRONG><a name="[3c]"></a>tokenize</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tokenize
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_cmd_loop
</UL>

<P><STRONG><a name="[4d]"></a>enable_interrupts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, isp_iap.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>disable_interrupts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, isp_iap.o(.text), UNUSED)

<P><STRONG><a name="[1b]"></a>execute_user_code</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = execute_user_code
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r4
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbl_main
</UL>

<P><STRONG><a name="[19]"></a>user_code_present</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = user_code_present &rArr; iap_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbl_main
</UL>

<P><STRONG><a name="[1a]"></a>check_isp_entry_pin</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, isp_iap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbl_main
</UL>

<P><STRONG><a name="[3a]"></a>exec_isp_cmd</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = exec_isp_cmd &rArr; read &rArr; getline &rArr; emac_getline &rArr; CopyFromFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_mem
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blank_check
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_sector
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_cmd
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_ram
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_entry
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_cmd_loop
</UL>

<P><STRONG><a name="[18]"></a>isp_cmd_loop</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = isp_cmd_loop &rArr; exec_isp_cmd &rArr; read &rArr; getline &rArr; emac_getline &rArr; CopyFromFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenize
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getline
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_isp
</UL>

<P><STRONG><a name="[43]"></a>write_PHY</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = write_PHY
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_emac
</UL>

<P><STRONG><a name="[44]"></a>read_PHY</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, emac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_emac
</UL>

<P><STRONG><a name="[3e]"></a>ReadFrame_EMAC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, emac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFromFrame_EMAC
</UL>

<P><STRONG><a name="[3d]"></a>CopyFromFrame_EMAC</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CopyFromFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFrame_EMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_getline
</UL>

<P><STRONG><a name="[40]"></a>same_mac</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = same_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_pass
</UL>

<P><STRONG><a name="[3f]"></a>filter_pass</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = filter_pass &rArr; same_mac
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;same_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_getline
</UL>

<P><STRONG><a name="[42]"></a>WriteFrame_EMAC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, emac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToFrame_EMAC
</UL>

<P><STRONG><a name="[41]"></a>CopyToFrame_EMAC</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CopyToFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFrame_EMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_sendline_crlf
</UL>

<P><STRONG><a name="[48]"></a>chksum16</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chksum16
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_sendline_crlf
</UL>

<P><STRONG><a name="[1c]"></a>init_emac</STRONG> (Thumb, 764 bytes, Stack size 24 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = init_emac &rArr; write_PHY
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_PHY
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_PHY
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_comms
</UL>

<P><STRONG><a name="[1e]"></a>emac_getline</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = emac_getline &rArr; CopyFromFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_HasTimestampExpired
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetTimestamp
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_pass
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFromFrame_EMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_handshake
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getline
</UL>

<P><STRONG><a name="[20]"></a>emac_sendline_crlf</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = emac_sendline_crlf &rArr; chksum16
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum16
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToFrame_EMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_handshake
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
</UL>

<P><STRONG><a name="[21]"></a>emac_handshake</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = emac_handshake &rArr; emac_getline &rArr; CopyFromFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_cmp
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_sendline_crlf
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_getline
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_handshake
</UL>

<P><STRONG><a name="[a]"></a>Timer_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[31]"></a>Timer_DeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_cmd
</UL>

<P><STRONG><a name="[45]"></a>Timer_GetTimestamp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_getline
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Delay
</UL>

<P><STRONG><a name="[46]"></a>Timer_HasTimestampExpired</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_getline
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Delay
</UL>

<P><STRONG><a name="[c]"></a>Timer_Delay</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Timer_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_HasTimestampExpired
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetTimestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_sendline_crlf (via Veneer)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_handshake (via Veneer)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_getline (via Veneer)
</UL>

<P><STRONG><a name="[49]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[4f]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__ARM_common_switch8</STRONG> (ARM, 32 bytes, Stack size 0 bytes, isp_iap.o(i.__ARM_common_switch8))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[12]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[11]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[14]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
