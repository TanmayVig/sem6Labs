; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\flashprg.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\flashprg.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I.\Core\CMSIS\Include -I.\Core\Device\NXP\LPC407x_8x_177x_8x\Include -I.\Drivers\include -I..\..\Core -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\NXP\LPC407x_8x_177x_8x -D__MICROLIB -D__RAM_MODE__ -DUSE_SPIFI_LIB -DCORE_M4 --omf_browse=.\obj\flashprg.crf FlashPrg.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Memory_Init PROC
;;;57     // returns 0 for OK, 1 for failed
;;;58     int Memory_Init
000000  b570              PUSH     {r4-r6,lr}
;;;59       (
;;;60       unsigned long adr,                                       // base address of memory
;;;61       unsigned long clk                                        // cpu clock frequency in Hz
;;;62       ) 
;;;63     {	
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;64       // turn power on to SPIFI
;;;65       LPC_SC->PCONP |= 0x00010000;
000006  4856              LDR      r0,|L1.352|
000008  6800              LDR      r0,[r0,#0]
00000a  f4403080          ORR      r0,r0,#0x10000
00000e  4954              LDR      r1,|L1.352|
000010  39c4              SUBS     r1,r1,#0xc4
000012  f8c100c4          STR      r0,[r1,#0xc4]
;;;66       
;;;67       LPC_IOCON->P2_7  &= ~0x07;
000016  4853              LDR      r0,|L1.356|
000018  f8d0011c          LDR      r0,[r0,#0x11c]
00001c  f0200007          BIC      r0,r0,#7
000020  4950              LDR      r1,|L1.356|
000022  f8c1011c          STR      r0,[r1,#0x11c]
;;;68       LPC_IOCON->P2_7  |= 0x05;    // SPIFI_CSN @ P2.7
000026  4608              MOV      r0,r1
000028  f8d0011c          LDR      r0,[r0,#0x11c]
00002c  f0400005          ORR      r0,r0,#5
000030  f8c1011c          STR      r0,[r1,#0x11c]
;;;69       LPC_IOCON->P0_22 &= ~0x07;
000034  4608              MOV      r0,r1
000036  6d80              LDR      r0,[r0,#0x58]
000038  f0200007          BIC      r0,r0,#7
00003c  6588              STR      r0,[r1,#0x58]
;;;70       LPC_IOCON->P0_22 |= 0x05;    // SPIFI_CLK @ P0.22
00003e  4608              MOV      r0,r1
000040  6d80              LDR      r0,[r0,#0x58]
000042  f0400005          ORR      r0,r0,#5
000046  6588              STR      r0,[r1,#0x58]
;;;71       LPC_IOCON->P0_15 &= ~0x07;
000048  4608              MOV      r0,r1
00004a  6bc0              LDR      r0,[r0,#0x3c]
00004c  f0200007          BIC      r0,r0,#7
000050  63c8              STR      r0,[r1,#0x3c]
;;;72       LPC_IOCON->P0_15 |= 0x05;    // SPIFI_IO2 @ P0.15
000052  4608              MOV      r0,r1
000054  6bc0              LDR      r0,[r0,#0x3c]
000056  f0400005          ORR      r0,r0,#5
00005a  63c8              STR      r0,[r1,#0x3c]
;;;73       LPC_IOCON->P0_16 &= ~0x07;
00005c  4608              MOV      r0,r1
00005e  6c00              LDR      r0,[r0,#0x40]
000060  f0200007          BIC      r0,r0,#7
000064  6408              STR      r0,[r1,#0x40]
;;;74       LPC_IOCON->P0_16 |= 0x05;    // SPIFI_IO3 @ P0.16
000066  4608              MOV      r0,r1
000068  6c00              LDR      r0,[r0,#0x40]
00006a  f0400005          ORR      r0,r0,#5
00006e  6408              STR      r0,[r1,#0x40]
;;;75       LPC_IOCON->P0_17 &= ~0x07;
000070  4608              MOV      r0,r1
000072  6c40              LDR      r0,[r0,#0x44]
000074  f0200007          BIC      r0,r0,#7
000078  6448              STR      r0,[r1,#0x44]
;;;76       LPC_IOCON->P0_17 |= 0x05;    // SPIFI_IO1 @ P0.17
00007a  4608              MOV      r0,r1
00007c  6c40              LDR      r0,[r0,#0x44]
00007e  f0400005          ORR      r0,r0,#5
000082  6448              STR      r0,[r1,#0x44]
;;;77       LPC_IOCON->P0_18 &= ~0x07;
000084  4608              MOV      r0,r1
000086  6c80              LDR      r0,[r0,#0x48]
000088  f0200007          BIC      r0,r0,#7
00008c  6488              STR      r0,[r1,#0x48]
;;;78       LPC_IOCON->P0_18 |= 0x05;    // SPIFI_IO0 @ P0.18
00008e  4608              MOV      r0,r1
000090  6c80              LDR      r0,[r0,#0x48]
000092  f0400005          ORR      r0,r0,#5
000096  6488              STR      r0,[r1,#0x48]
;;;79       
;;;80       pSpifi = &spifi_table;
000098  4833              LDR      r0,|L1.360|
00009a  4934              LDR      r1,|L1.364|
00009c  6008              STR      r0,[r1,#0]  ; pSpifi
;;;81     
;;;82     	return pSpifi->spifi_init(&obj, 4, S_RCVCLK | S_FULLCLK, 60);
00009e  4608              MOV      r0,r1
0000a0  6800              LDR      r0,[r0,#0]  ; pSpifi
0000a2  233c              MOVS     r3,#0x3c
0000a4  22c0              MOVS     r2,#0xc0
0000a6  2104              MOVS     r1,#4
0000a8  6804              LDR      r4,[r0,#0]
0000aa  4831              LDR      r0,|L1.368|
0000ac  47a0              BLX      r4
;;;83     }
0000ae  bd70              POP      {r4-r6,pc}
;;;84     
                          ENDP

                  Memory_EraseChip PROC
;;;87     // returns 0 for OK, 1 for failed
;;;88     int Memory_EraseChip(void) 
0000b0  b510              PUSH     {r4,lr}
;;;89     {
;;;90       unsigned long i;
;;;91       
;;;92       for (i = 0; i < obj.memSize / 4; i += 4)
0000b2  2400              MOVS     r4,#0
0000b4  e018              B        |L1.232|
                  |L1.182|
;;;93       {
;;;94         if (*((unsigned long *)(obj.base+i)) != 0xFFFFFFFF)
0000b6  482e              LDR      r0,|L1.368|
0000b8  6800              LDR      r0,[r0,#0]  ; obj
0000ba  5900              LDR      r0,[r0,r4]
0000bc  1c40              ADDS     r0,r0,#1
0000be  b190              CBZ      r0,|L1.230|
;;;95         {
;;;96           opers.dest = (char *)(obj.base);
0000c0  482b              LDR      r0,|L1.368|
0000c2  6800              LDR      r0,[r0,#0]  ; obj
0000c4  492b              LDR      r1,|L1.372|
0000c6  6008              STR      r0,[r1,#0]  ; opers
;;;97           opers.length = obj.memSize;
0000c8  4829              LDR      r0,|L1.368|
0000ca  68c0              LDR      r0,[r0,#0xc]  ; obj
0000cc  6048              STR      r0,[r1,#4]  ; opers
;;;98           opers.scratch = NULL;
0000ce  2000              MOVS     r0,#0
0000d0  6088              STR      r0,[r1,#8]  ; opers
;;;99           opers.options = S_VERIFY_ERASE;
0000d2  2020              MOVS     r0,#0x20
0000d4  6108              STR      r0,[r1,#0x10]  ; opers
;;;100          if (pSpifi->spifi_erase(&obj, &opers)) return 1;
0000d6  4825              LDR      r0,|L1.364|
0000d8  6800              LDR      r0,[r0,#0]  ; pSpifi
0000da  6882              LDR      r2,[r0,#8]
0000dc  4824              LDR      r0,|L1.368|
0000de  4790              BLX      r2
0000e0  b108              CBZ      r0,|L1.230|
0000e2  2001              MOVS     r0,#1
                  |L1.228|
;;;101        }
;;;102      }
;;;103    
;;;104      return 0;
;;;105    }
0000e4  bd10              POP      {r4,pc}
                  |L1.230|
0000e6  1d24              ADDS     r4,r4,#4              ;92
                  |L1.232|
0000e8  4821              LDR      r0,|L1.368|
0000ea  68c0              LDR      r0,[r0,#0xc]          ;92  ; obj
0000ec  ebb40f90          CMP      r4,r0,LSR #2          ;92
0000f0  d3e1              BCC      |L1.182|
0000f2  2000              MOVS     r0,#0                 ;104
0000f4  e7f6              B        |L1.228|
;;;106    
                          ENDP

                  Memory_EraseSector PROC
;;;109    // returns 0 for OK, 1 for failed
;;;110    int Memory_EraseSector
0000f6  b510              PUSH     {r4,lr}
;;;111      (
;;;112      unsigned long adr                                        // address of sector to erase
;;;113      ) 
;;;114    {
0000f8  4604              MOV      r4,r0
;;;115      opers.dest = (char *)adr;
0000fa  481e              LDR      r0,|L1.372|
0000fc  6004              STR      r4,[r0,#0]  ; opers
;;;116    	if(obj.devSize < 1024*256)
0000fe  481c              LDR      r0,|L1.368|
000100  6880              LDR      r0,[r0,#8]  ; obj
000102  f5b02f80          CMP      r0,#0x40000
000106  d204              BCS      |L1.274|
;;;117    		opers.length = obj.devSize;
000108  4819              LDR      r0,|L1.368|
00010a  6880              LDR      r0,[r0,#8]  ; obj
00010c  4919              LDR      r1,|L1.372|
00010e  6048              STR      r0,[r1,#4]  ; opers
000110  e003              B        |L1.282|
                  |L1.274|
;;;118    	else
;;;119    		opers.length = 1024*256;
000112  f44f2080          MOV      r0,#0x40000
000116  4917              LDR      r1,|L1.372|
000118  6048              STR      r0,[r1,#4]  ; opers
                  |L1.282|
;;;120      opers.scratch = NULL;
00011a  2000              MOVS     r0,#0
00011c  4915              LDR      r1,|L1.372|
00011e  6088              STR      r0,[r1,#8]  ; opers
;;;121      opers.options = S_VERIFY_ERASE;
000120  2020              MOVS     r0,#0x20
000122  6108              STR      r0,[r1,#0x10]  ; opers
;;;122      
;;;123      return pSpifi->spifi_erase(&obj, &opers);
000124  4811              LDR      r0,|L1.364|
000126  6800              LDR      r0,[r0,#0]  ; pSpifi
000128  6882              LDR      r2,[r0,#8]
00012a  4811              LDR      r0,|L1.368|
00012c  4790              BLX      r2
;;;124    }
00012e  bd10              POP      {r4,pc}
;;;125    
                          ENDP

                  Memory_ProgramPage PROC
;;;128    // returns 0 for OK, 1 for failed
;;;129    int Memory_ProgramPage
000130  b570              PUSH     {r4-r6,lr}
;;;130      (
;;;131      unsigned long adr,                                       // address of page
;;;132      unsigned long sz,                                        // size of page
;;;133      unsigned char *buf                                       // data to program into page
;;;134      ) 
;;;135    {
000132  4604              MOV      r4,r0
000134  460d              MOV      r5,r1
000136  4616              MOV      r6,r2
;;;136    	opers.dest = (char *)adr;
000138  480e              LDR      r0,|L1.372|
00013a  6004              STR      r4,[r0,#0]  ; opers
;;;137    	opers.length = sz;
00013c  6045              STR      r5,[r0,#4]  ; opers
;;;138    	opers.scratch = NULL;
00013e  2000              MOVS     r0,#0
000140  490c              LDR      r1,|L1.372|
000142  6088              STR      r0,[r1,#8]  ; opers
;;;139    	opers.protect = 0;
000144  60c8              STR      r0,[r1,#0xc]  ; opers
;;;140    	opers.options = S_CALLER_ERASE;
000146  2008              MOVS     r0,#8
000148  6108              STR      r0,[r1,#0x10]  ; opers
;;;141    	return pSpifi->spifi_program(&obj, (char *)buf, &opers);
00014a  4808              LDR      r0,|L1.364|
00014c  6800              LDR      r0,[r0,#0]  ; pSpifi
00014e  460a              MOV      r2,r1
000150  4631              MOV      r1,r6
000152  6843              LDR      r3,[r0,#4]
000154  4806              LDR      r0,|L1.368|
000156  4798              BLX      r3
;;;142    }
000158  bd70              POP      {r4-r6,pc}
;;;143    
                          ENDP

                  Memory_ReadByte PROC
;;;146    // returns the read byte
;;;147    unsigned char Memory_ReadByte
00015a  4601              MOV      r1,r0
;;;148      (
;;;149      unsigned long adr                                        // address of location to read
;;;150      )
;;;151    {
;;;152      return *((volatile unsigned char  *)adr);
00015c  7808              LDRB     r0,[r1,#0]
;;;153    }
00015e  4770              BX       lr
                          ENDP

                  |L1.352|
                          DCD      0x400fc0c4
                  |L1.356|
                          DCD      0x4002c000
                  |L1.360|
                          DCD      spifi_table
                  |L1.364|
                          DCD      pSpifi
                  |L1.368|
                          DCD      obj
                  |L1.372|
                          DCD      opers

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  obj
                          %        128
                  opers
                          %        20

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  Descriptor
                          DCD      0xaa557f3d
                          DCD      0x00000003
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      0x28000000
                          DCD      0x283fffff
                          DCD      0x10000500
                          DCD      0x1000ffff
                          DCD      0x00040000
000024  ff000000          DCB      0xff,0x00,0x00,0x00
                          DCD      0x00000100
                          DCD      0x0001c200
                          DCD      0x00000001
                          DCD      0x0000e100
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000044  4c504334          DCB      0x4c,0x50,0x43,0x34
000048  30383800          DCB      0x30,0x38,0x38,0x00
                          %        56
000084  47656e65          DCB      0x47,0x65,0x6e,0x65
000088  72696320          DCB      0x72,0x69,0x63,0x20
00008c  53504920          DCB      0x53,0x50,0x49,0x20
000090  4c504334          DCB      0x4c,0x50,0x43,0x34
000094  30383820          DCB      0x30,0x38,0x38,0x20
000098  45410000          DCB      0x45,0x41,0x00,0x00
                          %        40
0000c4  4e585020          DCB      0x4e,0x58,0x50,0x20
0000c8  53504946          DCB      0x53,0x50,0x49,0x46
0000cc  49206c69          DCB      0x49,0x20,0x6c,0x69
0000d0  62726172          DCB      0x62,0x72,0x61,0x72
0000d4  79206f6e          DCB      0x79,0x20,0x6f,0x6e
0000d8  20454120          DCB      0x20,0x45,0x41,0x20
0000dc  6576616c          DCB      0x65,0x76,0x61,0x6c
0000e0  20626f61          DCB      0x20,0x62,0x6f,0x61
0000e4  72640000          DCB      0x72,0x64,0x00,0x00
                          %        92
000144  53686f75          DCB      0x53,0x68,0x6f,0x75
000148  6c642077          DCB      0x6c,0x64,0x20,0x77
00014c  6f726b20          DCB      0x6f,0x72,0x6b,0x20
000150  77697468          DCB      0x77,0x69,0x74,0x68
000154  20616e79          DCB      0x20,0x61,0x6e,0x79
000158  20535049          DCB      0x20,0x53,0x50,0x49
00015c  46492064          DCB      0x46,0x49,0x20,0x64
000160  65766963          DCB      0x65,0x76,0x69,0x63
000164  6520636f          DCB      0x65,0x20,0x63,0x6f
000168  6d706174          DCB      0x6d,0x70,0x61,0x74
00016c  69626c65          DCB      0x69,0x62,0x6c,0x65
000170  20776974          DCB      0x20,0x77,0x69,0x74
000174  68207468          DCB      0x68,0x20,0x74,0x68
000178  65204e58          DCB      0x65,0x20,0x4e,0x58
00017c  50205350          DCB      0x50,0x20,0x53,0x50
000180  49464920          DCB      0x49,0x46,0x49,0x20
000184  6c696272          DCB      0x6c,0x69,0x62,0x72
000188  6172793b          DCB      0x61,0x72,0x79,0x3b
00018c  3b466f72          DCB      0x3b,0x46,0x6f,0x72
000190  20746865          DCB      0x20,0x74,0x68,0x65
000194  20454120          DCB      0x20,0x45,0x41,0x20
000198  4c504334          DCB      0x4c,0x50,0x43,0x34
00019c  30383820          DCB      0x30,0x38,0x38,0x20
0001a0  626f6172          DCB      0x62,0x6f,0x61,0x72
0001a4  643a3b3b          DCB      0x64,0x3a,0x3b,0x3b
0001a8  2d20456e          DCB      0x2d,0x20,0x45,0x6e
0001ac  73757265          DCB      0x73,0x75,0x72,0x65
0001b0  204a5032          DCB      0x20,0x4a,0x50,0x32
0001b4  30206973          DCB      0x30,0x20,0x69,0x73
0001b8  20636f6e          DCB      0x20,0x63,0x6f,0x6e
0001bc  6e656374          DCB      0x6e,0x65,0x63,0x74
0001c0  65643b2d          DCB      0x65,0x64,0x3b,0x2d
0001c4  20536574          DCB      0x20,0x53,0x65,0x74
0001c8  20543120          DCB      0x20,0x54,0x31,0x20
0001cc  616e6420          DCB      0x61,0x6e,0x64,0x20
0001d0  54322074          DCB      0x54,0x32,0x20,0x74
0001d4  6f343030          DCB      0x6f,0x34,0x30,0x30
0001d8  6d733b2d          DCB      0x6d,0x73,0x3b,0x2d
0001dc  20436f6e          DCB      0x20,0x43,0x6f,0x6e
0001e0  6e656374          DCB      0x6e,0x65,0x63,0x74
0001e4  20466c61          DCB      0x20,0x46,0x6c,0x61
0001e8  7368204d          DCB      0x73,0x68,0x20,0x4d
0001ec  61676963          DCB      0x61,0x67,0x69,0x63
0001f0  20746f20          DCB      0x20,0x74,0x6f,0x20
0001f4  4a323520          DCB      0x4a,0x32,0x35,0x20
0001f8  666f7220          DCB      0x66,0x6f,0x72,0x20
0001fc  49535000          DCB      0x49,0x53,0x50,0x00
                          %        68
                          DCD      0x3d7f55aa

                          AREA ||.data||, DATA, ALIGN=2

                  pSpifi
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "FlashPrg.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_FlashPrg_c_4ccf75d2____REV16|
#line 115 ".\\Core\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_FlashPrg_c_4ccf75d2____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___10_FlashPrg_c_4ccf75d2____REVSH|
#line 129
|__asm___10_FlashPrg_c_4ccf75d2____REVSH| PROC
#line 130

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
