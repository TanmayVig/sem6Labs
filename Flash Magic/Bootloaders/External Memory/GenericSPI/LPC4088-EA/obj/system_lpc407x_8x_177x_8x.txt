; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\system_lpc407x_8x_177x_8x.o --asm_dir=.\obj\ --list_dir=.\obj\ --depend=.\obj\system_lpc407x_8x_177x_8x.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I.\Core\CMSIS\Include -I.\Core\Device\NXP\LPC407x_8x_177x_8x\Include -I.\Drivers\include -I..\..\Core -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\NXP\LPC407x_8x_177x_8x -D__MICROLIB -D__RAM_MODE__ -DUSE_SPIFI_LIB -DCORE_M4 --omf_browse=.\obj\system_lpc407x_8x_177x_8x.crf Core\Device\NXP\LPC407x_8x_177x_8x\Source\Templates\system_LPC407x_8x_177x_8x.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;377     *----------------------------------------------------------------------------*/
;;;378    void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
000000  b530              PUSH     {r4,r5,lr}
;;;379    {
;;;380      /* Determine clock frequency according to clock register values             */
;;;381      if ((LPC_SC->CCLKSEL &0x100) == 0) {            /* cclk = sysclk    */
000002  48f5              LDR      r0,|L1.984|
000004  6800              LDR      r0,[r0,#0]
000006  f4007080          AND      r0,r0,#0x100
00000a  2800              CMP      r0,#0
00000c  d172              BNE      |L1.244|
;;;382        if ((LPC_SC->CLKSRCSEL & 0x01) == 0) {    /* sysclk = irc_clk */
00000e  48f2              LDR      r0,|L1.984|
000010  3008              ADDS     r0,r0,#8
000012  6800              LDR      r0,[r0,#0]
000014  f0000001          AND      r0,r0,#1
000018  bb70              CBNZ     r0,|L1.120|
;;;383    		  SystemCoreClock = __CLK_DIV(IRC_OSC , (LPC_SC->CCLKSEL & 0x1F));
00001a  48ef              LDR      r0,|L1.984|
00001c  6800              LDR      r0,[r0,#0]
00001e  f000001f          AND      r0,r0,#0x1f
000022  b908              CBNZ     r0,|L1.40|
000024  2000              MOVS     r0,#0
000026  e006              B        |L1.54|
                  |L1.40|
000028  48eb              LDR      r0,|L1.984|
00002a  6800              LDR      r0,[r0,#0]
00002c  f000001f          AND      r0,r0,#0x1f
000030  49ea              LDR      r1,|L1.988|
000032  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.54|
000036  49ea              LDR      r1,|L1.992|
000038  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;384              PeripheralClock = __CLK_DIV(IRC_OSC , (LPC_SC->PCLKSEL & 0x1F));
00003a  48e7              LDR      r0,|L1.984|
00003c  30a4              ADDS     r0,r0,#0xa4
00003e  6800              LDR      r0,[r0,#0]
000040  f000001f          AND      r0,r0,#0x1f
000044  b908              CBNZ     r0,|L1.74|
000046  2000              MOVS     r0,#0
000048  e007              B        |L1.90|
                  |L1.74|
00004a  48e3              LDR      r0,|L1.984|
00004c  30a4              ADDS     r0,r0,#0xa4
00004e  6800              LDR      r0,[r0,#0]
000050  f000001f          AND      r0,r0,#0x1f
000054  49e1              LDR      r1,|L1.988|
000056  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.90|
00005a  49e2              LDR      r1,|L1.996|
00005c  6008              STR      r0,[r1,#0]  ; PeripheralClock
;;;385              EMCClock        = (SystemCoreClock / ((LPC_SC->EMCCLKSEL & 0x01)+1));
00005e  48de              LDR      r0,|L1.984|
000060  1f00              SUBS     r0,r0,#4
000062  6800              LDR      r0,[r0,#0]
000064  f0000001          AND      r0,r0,#1
000068  1c40              ADDS     r0,r0,#1
00006a  49dd              LDR      r1,|L1.992|
00006c  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
00006e  fbb1f0f0          UDIV     r0,r1,r0
000072  49dd              LDR      r1,|L1.1000|
000074  6008              STR      r0,[r1,#0]  ; EMCClock
000076  e0be              B        |L1.502|
                  |L1.120|
;;;386        }
;;;387        else {                                        /* sysclk = osc_clk */
;;;388          if ((LPC_SC->SCS & 0x40) == 0) {
000078  48d7              LDR      r0,|L1.984|
00007a  309c              ADDS     r0,r0,#0x9c
00007c  6800              LDR      r0,[r0,#0]
00007e  f0000040          AND      r0,r0,#0x40
000082  b938              CBNZ     r0,|L1.148|
;;;389              SystemCoreClock = 0;                      /* this should never happen! */
000084  2000              MOVS     r0,#0
000086  49d6              LDR      r1,|L1.992|
000088  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;390              PeripheralClock = 0;
00008a  49d6              LDR      r1,|L1.996|
00008c  6008              STR      r0,[r1,#0]  ; PeripheralClock
;;;391              EMCClock        = 0;
00008e  49d6              LDR      r1,|L1.1000|
000090  6008              STR      r0,[r1,#0]  ; EMCClock
000092  e0b0              B        |L1.502|
                  |L1.148|
;;;392          }
;;;393          else {
;;;394              SystemCoreClock = __CLK_DIV(OSC_CLK , (LPC_SC->CCLKSEL & 0x1F));
000094  48d0              LDR      r0,|L1.984|
000096  6800              LDR      r0,[r0,#0]
000098  f000001f          AND      r0,r0,#0x1f
00009c  b908              CBNZ     r0,|L1.162|
00009e  2000              MOVS     r0,#0
0000a0  e006              B        |L1.176|
                  |L1.162|
0000a2  48cd              LDR      r0,|L1.984|
0000a4  6800              LDR      r0,[r0,#0]
0000a6  f000001f          AND      r0,r0,#0x1f
0000aa  49cc              LDR      r1,|L1.988|
0000ac  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.176|
0000b0  49cb              LDR      r1,|L1.992|
0000b2  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;395              PeripheralClock = __CLK_DIV(OSC_CLK , (LPC_SC->PCLKSEL & 0x1F));
0000b4  48c8              LDR      r0,|L1.984|
0000b6  30a4              ADDS     r0,r0,#0xa4
0000b8  6800              LDR      r0,[r0,#0]
0000ba  f000001f          AND      r0,r0,#0x1f
0000be  b908              CBNZ     r0,|L1.196|
0000c0  2000              MOVS     r0,#0
0000c2  e007              B        |L1.212|
                  |L1.196|
0000c4  48c4              LDR      r0,|L1.984|
0000c6  30a4              ADDS     r0,r0,#0xa4
0000c8  6800              LDR      r0,[r0,#0]
0000ca  f000001f          AND      r0,r0,#0x1f
0000ce  49c3              LDR      r1,|L1.988|
0000d0  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.212|
0000d4  49c3              LDR      r1,|L1.996|
0000d6  6008              STR      r0,[r1,#0]  ; PeripheralClock
;;;396              EMCClock        = (SystemCoreClock / ((LPC_SC->EMCCLKSEL & 0x01)+1));
0000d8  48bf              LDR      r0,|L1.984|
0000da  1f00              SUBS     r0,r0,#4
0000dc  6800              LDR      r0,[r0,#0]
0000de  f0000001          AND      r0,r0,#1
0000e2  1c40              ADDS     r0,r0,#1
0000e4  49be              LDR      r1,|L1.992|
0000e6  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
0000e8  fbb1f0f0          UDIV     r0,r1,r0
0000ec  49be              LDR      r1,|L1.1000|
0000ee  6008              STR      r0,[r1,#0]  ; EMCClock
0000f0  e081              B        |L1.502|
0000f2  e7ff              B        |L1.244|
                  |L1.244|
;;;397          }
;;;398        }
;;;399      }
;;;400      else {                                          /* cclk = pll_clk */
;;;401        if ((LPC_SC->PLL0STAT & 0x100) == 0) {        /* PLL0 not enabled */
0000f4  48b8              LDR      r0,|L1.984|
0000f6  387c              SUBS     r0,r0,#0x7c
0000f8  6800              LDR      r0,[r0,#0]
0000fa  f4007080          AND      r0,r0,#0x100
0000fe  b938              CBNZ     r0,|L1.272|
;;;402              SystemCoreClock = 0;                      /* this should never happen! */
000100  2000              MOVS     r0,#0
000102  49b7              LDR      r1,|L1.992|
000104  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;403              PeripheralClock = 0;
000106  49b7              LDR      r1,|L1.996|
000108  6008              STR      r0,[r1,#0]  ; PeripheralClock
;;;404              EMCClock 		  = 0;
00010a  49b7              LDR      r1,|L1.1000|
00010c  6008              STR      r0,[r1,#0]  ; EMCClock
00010e  e072              B        |L1.502|
                  |L1.272|
;;;405        }
;;;406        else {
;;;407          if ((LPC_SC->CLKSRCSEL & 0x01) == 0) {    /* sysclk = irc_clk */
000110  48b1              LDR      r0,|L1.984|
000112  3008              ADDS     r0,r0,#8
000114  6800              LDR      r0,[r0,#0]
000116  f0000001          AND      r0,r0,#1
00011a  bb70              CBNZ     r0,|L1.378|
;;;408              uint8_t mul = ((LPC_SC->PLL0STAT & 0x1F) + 1);
00011c  4cae              LDR      r4,|L1.984|
00011e  3c7c              SUBS     r4,r4,#0x7c
000120  6824              LDR      r4,[r4,#0]
000122  f004041f          AND      r4,r4,#0x1f
000126  1c60              ADDS     r0,r4,#1
;;;409              uint8_t cpu_div = (LPC_SC->CCLKSEL & 0x1F);
000128  4cb0              LDR      r4,|L1.1004|
00012a  f8d44104          LDR      r4,[r4,#0x104]
00012e  f004011f          AND      r1,r4,#0x1f
;;;410              uint8_t per_div = (LPC_SC->PCLKSEL & 0x1F);
000132  4ca9              LDR      r4,|L1.984|
000134  34a4              ADDS     r4,r4,#0xa4
000136  6824              LDR      r4,[r4,#0]
000138  f004021f          AND      r2,r4,#0x1f
;;;411              uint8_t emc_div = (LPC_SC->EMCCLKSEL & 0x01)+1;
00013c  4cab              LDR      r4,|L1.1004|
00013e  f8d44100          LDR      r4,[r4,#0x100]
000142  f0040401          AND      r4,r4,#1
000146  1c63              ADDS     r3,r4,#1
;;;412              SystemCoreClock = __CLK_DIV(IRC_OSC * mul , cpu_div);
000148  b909              CBNZ     r1,|L1.334|
00014a  2400              MOVS     r4,#0
00014c  e003              B        |L1.342|
                  |L1.334|
00014e  4ca3              LDR      r4,|L1.988|
000150  4344              MULS     r4,r0,r4
000152  fbb4f4f1          UDIV     r4,r4,r1
                  |L1.342|
000156  4da2              LDR      r5,|L1.992|
000158  602c              STR      r4,[r5,#0]  ; SystemCoreClock
;;;413              PeripheralClock = __CLK_DIV(IRC_OSC * mul , per_div);
00015a  b90a              CBNZ     r2,|L1.352|
00015c  2400              MOVS     r4,#0
00015e  e003              B        |L1.360|
                  |L1.352|
000160  4c9e              LDR      r4,|L1.988|
000162  4344              MULS     r4,r0,r4
000164  fbb4f4f2          UDIV     r4,r4,r2
                  |L1.360|
000168  4d9e              LDR      r5,|L1.996|
00016a  602c              STR      r4,[r5,#0]  ; PeripheralClock
;;;414              EMCClock        = SystemCoreClock / emc_div;
00016c  4c9c              LDR      r4,|L1.992|
00016e  6824              LDR      r4,[r4,#0]  ; SystemCoreClock
000170  fbb4f4f3          UDIV     r4,r4,r3
000174  4d9c              LDR      r5,|L1.1000|
000176  602c              STR      r4,[r5,#0]  ; EMCClock
;;;415          }
000178  e03d              B        |L1.502|
                  |L1.378|
00017a  e7ff              B        |L1.380|
                  |L1.380|
;;;416          else {                                        /* sysclk = osc_clk */
;;;417            if ((LPC_SC->SCS & 0x40) == 0) {
00017c  4896              LDR      r0,|L1.984|
00017e  309c              ADDS     r0,r0,#0x9c
000180  6800              LDR      r0,[r0,#0]
000182  f0000040          AND      r0,r0,#0x40
000186  b938              CBNZ     r0,|L1.408|
;;;418              SystemCoreClock = 0;                      /* this should never happen! */
000188  2000              MOVS     r0,#0
00018a  4995              LDR      r1,|L1.992|
00018c  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;419              PeripheralClock = 0;
00018e  4995              LDR      r1,|L1.996|
000190  6008              STR      r0,[r1,#0]  ; PeripheralClock
;;;420              EMCClock 		  = 0;
000192  4995              LDR      r1,|L1.1000|
000194  6008              STR      r0,[r1,#0]  ; EMCClock
000196  e02e              B        |L1.502|
                  |L1.408|
;;;421            }
;;;422            else {
;;;423              uint8_t mul = ((LPC_SC->PLL0STAT & 0x1F) + 1);
000198  4c8f              LDR      r4,|L1.984|
00019a  3c7c              SUBS     r4,r4,#0x7c
00019c  6824              LDR      r4,[r4,#0]
00019e  f004041f          AND      r4,r4,#0x1f
0001a2  1c60              ADDS     r0,r4,#1
;;;424              uint8_t cpu_div = (LPC_SC->CCLKSEL & 0x1F);
0001a4  4c91              LDR      r4,|L1.1004|
0001a6  f8d44104          LDR      r4,[r4,#0x104]
0001aa  f004011f          AND      r1,r4,#0x1f
;;;425              uint8_t per_div = (LPC_SC->PCLKSEL & 0x1F);
0001ae  4c8a              LDR      r4,|L1.984|
0001b0  34a4              ADDS     r4,r4,#0xa4
0001b2  6824              LDR      r4,[r4,#0]
0001b4  f004021f          AND      r2,r4,#0x1f
;;;426    		  uint8_t emc_div = (LPC_SC->EMCCLKSEL & 0x01)+1;
0001b8  4c8c              LDR      r4,|L1.1004|
0001ba  f8d44100          LDR      r4,[r4,#0x100]
0001be  f0040401          AND      r4,r4,#1
0001c2  1c63              ADDS     r3,r4,#1
;;;427              SystemCoreClock = __CLK_DIV(OSC_CLK * mul , cpu_div);
0001c4  b909              CBNZ     r1,|L1.458|
0001c6  2400              MOVS     r4,#0
0001c8  e003              B        |L1.466|
                  |L1.458|
0001ca  4c84              LDR      r4,|L1.988|
0001cc  4344              MULS     r4,r0,r4
0001ce  fbb4f4f1          UDIV     r4,r4,r1
                  |L1.466|
0001d2  4d83              LDR      r5,|L1.992|
0001d4  602c              STR      r4,[r5,#0]  ; SystemCoreClock
;;;428              PeripheralClock = __CLK_DIV(OSC_CLK * mul , per_div);
0001d6  b90a              CBNZ     r2,|L1.476|
0001d8  2400              MOVS     r4,#0
0001da  e003              B        |L1.484|
                  |L1.476|
0001dc  4c7f              LDR      r4,|L1.988|
0001de  4344              MULS     r4,r0,r4
0001e0  fbb4f4f2          UDIV     r4,r4,r2
                  |L1.484|
0001e4  4d7f              LDR      r5,|L1.996|
0001e6  602c              STR      r4,[r5,#0]  ; PeripheralClock
;;;429              EMCClock        = SystemCoreClock / emc_div;
0001e8  4c7d              LDR      r4,|L1.992|
0001ea  6824              LDR      r4,[r4,#0]  ; SystemCoreClock
0001ec  fbb4f4f3          UDIV     r4,r4,r3
0001f0  4d7d              LDR      r5,|L1.1000|
0001f2  602c              STR      r4,[r5,#0]  ; EMCClock
;;;430            }
0001f4  bf00              NOP      
                  |L1.502|
;;;431          }
;;;432        }
;;;433      }
;;;434      /* ---update USBClock------------------*/
;;;435      if(LPC_SC->USBCLKSEL & (0x01<<8))//Use PLL0 as the input to the USB clock divider
0001f6  4878              LDR      r0,|L1.984|
0001f8  1d00              ADDS     r0,r0,#4
0001fa  6800              LDR      r0,[r0,#0]
0001fc  f4007080          AND      r0,r0,#0x100
000200  b398              CBZ      r0,|L1.618|
;;;436      {
;;;437    	  switch (LPC_SC->USBCLKSEL & 0x1F)
000202  4875              LDR      r0,|L1.984|
000204  1d00              ADDS     r0,r0,#4
000206  6800              LDR      r0,[r0,#0]
000208  f000001f          AND      r0,r0,#0x1f
00020c  b120              CBZ      r0,|L1.536|
00020e  2804              CMP      r0,#4
000210  d006              BEQ      |L1.544|
000212  2806              CMP      r0,#6
000214  d124              BNE      |L1.608|
000216  e004              B        |L1.546|
                  |L1.536|
;;;438    	  {
;;;439    	  case 0:
;;;440    		  USBClock = 0; //no clock will be provided to the USB subsystem
000218  2000              MOVS     r0,#0
00021a  4975              LDR      r1,|L1.1008|
00021c  6008              STR      r0,[r1,#0]  ; USBClock
;;;441    		  break;
00021e  e023              B        |L1.616|
                  |L1.544|
;;;442    	  case 4:
;;;443    	  case 6:
000220  bf00              NOP      
                  |L1.546|
;;;444                {
;;;445                     uint8_t mul = ((LPC_SC->PLL0STAT & 0x1F) + 1);
000222  4a6d              LDR      r2,|L1.984|
000224  3a7c              SUBS     r2,r2,#0x7c
000226  6812              LDR      r2,[r2,#0]
000228  f002021f          AND      r2,r2,#0x1f
00022c  1c50              ADDS     r0,r2,#1
;;;446                     uint8_t usb_div = (LPC_SC->USBCLKSEL & 0x1F);
00022e  4a6f              LDR      r2,|L1.1004|
000230  f8d22108          LDR      r2,[r2,#0x108]
000234  f002011f          AND      r1,r2,#0x1f
;;;447    		  if(LPC_SC->CLKSRCSEL & 0x01)	//pll_clk_in = main_osc
000238  4a67              LDR      r2,|L1.984|
00023a  3208              ADDS     r2,r2,#8
00023c  6812              LDR      r2,[r2,#0]
00023e  f0020201          AND      r2,r2,#1
000242  b132              CBZ      r2,|L1.594|
;;;448    			  USBClock = OSC_CLK * mul / usb_div;
000244  4a65              LDR      r2,|L1.988|
000246  4342              MULS     r2,r0,r2
000248  fbb2f2f1          UDIV     r2,r2,r1
00024c  4b68              LDR      r3,|L1.1008|
00024e  601a              STR      r2,[r3,#0]  ; USBClock
000250  e005              B        |L1.606|
                  |L1.594|
;;;449    		  else //pll_clk_in = irc_clk
;;;450    			  USBClock = IRC_OSC * mul / usb_div;
000252  4a62              LDR      r2,|L1.988|
000254  4342              MULS     r2,r0,r2
000256  fbb2f2f1          UDIV     r2,r2,r1
00025a  4b65              LDR      r3,|L1.1008|
00025c  601a              STR      r2,[r3,#0]  ; USBClock
                  |L1.606|
;;;451                }
;;;452                break;
00025e  e003              B        |L1.616|
                  |L1.608|
;;;453    	  default:
;;;454    		  USBClock = 0;  /* this should never happen! */
000260  2000              MOVS     r0,#0
000262  4963              LDR      r1,|L1.1008|
000264  6008              STR      r0,[r1,#0]  ; USBClock
000266  bf00              NOP                            ;437
                  |L1.616|
000268  e025              B        |L1.694|
                  |L1.618|
00026a  e7ff              B        |L1.620|
                  |L1.620|
;;;455    	  }
;;;456      }
;;;457      else if(LPC_SC->USBCLKSEL & (0x02<<8))//usb_input_clk = alt_pll (pll1)
00026c  485a              LDR      r0,|L1.984|
00026e  1d00              ADDS     r0,r0,#4
000270  6800              LDR      r0,[r0,#0]
000272  f4007000          AND      r0,r0,#0x200
000276  b1d8              CBZ      r0,|L1.688|
;;;458      {
;;;459    	  if(LPC_SC->CLKSRCSEL & 0x01)	//pll1_clk_in = main_osc
000278  4857              LDR      r0,|L1.984|
00027a  3008              ADDS     r0,r0,#8
00027c  6800              LDR      r0,[r0,#0]
00027e  f0000001          AND      r0,r0,#1
000282  b150              CBZ      r0,|L1.666|
;;;460    	  		USBClock = (OSC_CLK * ((LPC_SC->PLL1STAT & 0x1F) + 1));
000284  4854              LDR      r0,|L1.984|
000286  385c              SUBS     r0,r0,#0x5c
000288  6800              LDR      r0,[r0,#0]
00028a  f000001f          AND      r0,r0,#0x1f
00028e  1c40              ADDS     r0,r0,#1
000290  4952              LDR      r1,|L1.988|
000292  4348              MULS     r0,r1,r0
000294  4956              LDR      r1,|L1.1008|
000296  6008              STR      r0,[r1,#0]  ; USBClock
000298  e00d              B        |L1.694|
                  |L1.666|
;;;461    	  else //pll1_clk_in = irc_clk
;;;462    	  		USBClock = (IRC_OSC * ((LPC_SC->PLL0STAT & 0x1F) + 1));
00029a  484f              LDR      r0,|L1.984|
00029c  387c              SUBS     r0,r0,#0x7c
00029e  6800              LDR      r0,[r0,#0]
0002a0  f000001f          AND      r0,r0,#0x1f
0002a4  1c40              ADDS     r0,r0,#1
0002a6  494d              LDR      r1,|L1.988|
0002a8  4348              MULS     r0,r1,r0
0002aa  4951              LDR      r1,|L1.1008|
0002ac  6008              STR      r0,[r1,#0]  ; USBClock
0002ae  e002              B        |L1.694|
                  |L1.688|
;;;463      }
;;;464      else
;;;465    	  USBClock = 0; /* this should never happen! */
0002b0  2000              MOVS     r0,#0
0002b2  494f              LDR      r1,|L1.1008|
0002b4  6008              STR      r0,[r1,#0]  ; USBClock
                  |L1.694|
;;;466    }
0002b6  bd30              POP      {r4,r5,pc}
;;;467    
                          ENDP

                  fpu_init PROC
;;;471    
;;;472    void fpu_init(void)
0002b8  b53e              PUSH     {r1-r5,lr}
;;;473    {
;;;474     // from arm trm manual:
;;;475    //                ; CPACR is located at address 0xE000ED88
;;;476    //                LDR.W R0, =0xE000ED88
;;;477    //                ; Read CPACR
;;;478    //                LDR R1, [R0]
;;;479    //                ; Set bits 20-23 to enable CP10 and CP11 coprocessors
;;;480    //                ORR R1, R1, #(0xF << 20)
;;;481    //                ; Write back the modified value to the CPACR
;;;482    //                STR R1, [R0]
;;;483    
;;;484    
;;;485        volatile uint32_t* regCpacr = (uint32_t*) LPC_CPACR;
0002ba  484e              LDR      r0,|L1.1012|
;;;486        volatile uint32_t* regMvfr0 = (uint32_t*) SCB_MVFR0;
0002bc  4b4e              LDR      r3,|L1.1016|
;;;487        volatile uint32_t* regMvfr1 = (uint32_t*) SCB_MVFR1;
0002be  1d19              ADDS     r1,r3,#4
;;;488        volatile uint32_t Cpacr;
;;;489        volatile uint32_t Mvfr0;
;;;490        volatile uint32_t Mvfr1;
;;;491        char vfpPresent = 0;
0002c0  2200              MOVS     r2,#0
;;;492    
;;;493        Mvfr0 = *regMvfr0;
0002c2  681c              LDR      r4,[r3,#0]
0002c4  9401              STR      r4,[sp,#4]
;;;494        Mvfr1 = *regMvfr1;
0002c6  680c              LDR      r4,[r1,#0]
0002c8  9400              STR      r4,[sp,#0]
;;;495    
;;;496        vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
0002ca  4d4c              LDR      r5,|L1.1020|
0002cc  9c01              LDR      r4,[sp,#4]
0002ce  42ac              CMP      r4,r5
0002d0  d105              BNE      |L1.734|
0002d2  4d4b              LDR      r5,|L1.1024|
0002d4  9c00              LDR      r4,[sp,#0]
0002d6  42ac              CMP      r4,r5
0002d8  d101              BNE      |L1.734|
0002da  2401              MOVS     r4,#1
0002dc  e000              B        |L1.736|
                  |L1.734|
0002de  2400              MOVS     r4,#0
                  |L1.736|
0002e0  4622              MOV      r2,r4
;;;497    
;;;498        if(vfpPresent)
0002e2  b13a              CBZ      r2,|L1.756|
;;;499        {
;;;500            Cpacr = *regCpacr;
0002e4  6804              LDR      r4,[r0,#0]
0002e6  9402              STR      r4,[sp,#8]
;;;501            Cpacr |= (0xF << 20);
0002e8  9c02              LDR      r4,[sp,#8]
0002ea  f4440470          ORR      r4,r4,#0xf00000
0002ee  9402              STR      r4,[sp,#8]
;;;502            *regCpacr = Cpacr;   // enable CP10 and CP11 for full access
0002f0  9c02              LDR      r4,[sp,#8]
0002f2  6004              STR      r4,[r0,#0]
                  |L1.756|
;;;503        }
;;;504    
;;;505    }
0002f4  bd3e              POP      {r1-r5,pc}
;;;506    #endif
                          ENDP

                  SystemInit PROC
;;;516     */
;;;517    void SystemInit (void)
0002f6  b500              PUSH     {lr}
;;;518    {
;;;519    #ifndef __CODE_RED
;;;520    #ifdef CORE_M4
;;;521    fpu_init();
0002f8  f7fffffe          BL       fpu_init
;;;522    #endif
;;;523    #endif
;;;524    
;;;525    #if (CLOCK_SETUP)                       /* Clock Setup                        */
;;;526      LPC_SC->SCS       = SCS_Val;
0002fc  2020              MOVS     r0,#0x20
0002fe  4936              LDR      r1,|L1.984|
000300  319c              ADDS     r1,r1,#0x9c
000302  6008              STR      r0,[r1,#0]
;;;527      if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
;;;528        while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
000304  bf00              NOP      
                  |L1.774|
000306  4834              LDR      r0,|L1.984|
000308  309c              ADDS     r0,r0,#0x9c
00030a  6800              LDR      r0,[r0,#0]
00030c  f0000040          AND      r0,r0,#0x40
000310  2800              CMP      r0,#0
000312  d0f8              BEQ      |L1.774|
;;;529      }
;;;530    
;;;531      LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for sysclk/PLL0*/
000314  2001              MOVS     r0,#1
000316  4930              LDR      r1,|L1.984|
000318  3108              ADDS     r1,r1,#8
00031a  6008              STR      r0,[r1,#0]
;;;532    
;;;533    #if (PLL0_SETUP)
;;;534      LPC_SC->PLL0CFG   = PLL0CFG_Val;
00031c  2009              MOVS     r0,#9
00031e  4933              LDR      r1,|L1.1004|
000320  f8c10084          STR      r0,[r1,#0x84]
;;;535      LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
000324  2001              MOVS     r0,#1
000326  4931              LDR      r1,|L1.1004|
000328  3180              ADDS     r1,r1,#0x80
00032a  6008              STR      r0,[r1,#0]
;;;536      LPC_SC->PLL0FEED  = 0xAA;
00032c  20aa              MOVS     r0,#0xaa
00032e  492a              LDR      r1,|L1.984|
000330  3978              SUBS     r1,r1,#0x78
000332  6008              STR      r0,[r1,#0]
;;;537      LPC_SC->PLL0FEED  = 0x55;
000334  2055              MOVS     r0,#0x55
000336  6008              STR      r0,[r1,#0]
;;;538      while (!(LPC_SC->PLL0STAT & (1<<10)));/* Wait for PLOCK0                    */
000338  bf00              NOP      
                  |L1.826|
00033a  4827              LDR      r0,|L1.984|
00033c  387c              SUBS     r0,r0,#0x7c
00033e  6800              LDR      r0,[r0,#0]
000340  f4006080          AND      r0,r0,#0x400
000344  2800              CMP      r0,#0
000346  d0f8              BEQ      |L1.826|
;;;539    #endif
;;;540    
;;;541    #if (PLL1_SETUP)
;;;542      LPC_SC->PLL1CFG   = PLL1CFG_Val;
000348  2023              MOVS     r0,#0x23
00034a  4923              LDR      r1,|L1.984|
00034c  3960              SUBS     r1,r1,#0x60
00034e  6008              STR      r0,[r1,#0]
;;;543      LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
000350  2001              MOVS     r0,#1
000352  4926              LDR      r1,|L1.1004|
000354  f8c100a0          STR      r0,[r1,#0xa0]
;;;544      LPC_SC->PLL1FEED  = 0xAA;
000358  20aa              MOVS     r0,#0xaa
00035a  491f              LDR      r1,|L1.984|
00035c  3958              SUBS     r1,r1,#0x58
00035e  6008              STR      r0,[r1,#0]
;;;545      LPC_SC->PLL1FEED  = 0x55;
000360  2055              MOVS     r0,#0x55
000362  4922              LDR      r1,|L1.1004|
000364  f8c100ac          STR      r0,[r1,#0xac]
;;;546      while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
000368  bf00              NOP      
                  |L1.874|
00036a  481b              LDR      r0,|L1.984|
00036c  385c              SUBS     r0,r0,#0x5c
00036e  6800              LDR      r0,[r0,#0]
000370  f4006080          AND      r0,r0,#0x400
000374  2800              CMP      r0,#0
000376  d0f8              BEQ      |L1.874|
;;;547    #endif
;;;548    
;;;549      LPC_SC->CCLKSEL   = CCLKSEL_Val;      /* Setup Clock Divider                */
000378  f2401001          MOV      r0,#0x101
00037c  4916              LDR      r1,|L1.984|
00037e  6008              STR      r0,[r1,#0]
;;;550      LPC_SC->USBCLKSEL = USBCLKSEL_Val;    /* Setup USB Clock Divider            */
000380  f2402001          MOV      r0,#0x201
000384  4919              LDR      r1,|L1.1004|
000386  f8c10108          STR      r0,[r1,#0x108]
;;;551      LPC_SC->EMCCLKSEL = EMCCLKSEL_Val;    /* EMC Clock Selection                */
00038a  2001              MOVS     r0,#1
00038c  4912              LDR      r1,|L1.984|
00038e  1f09              SUBS     r1,r1,#4
000390  6008              STR      r0,[r1,#0]
;;;552      LPC_SC->SPIFICLKSEL  = SPIFICLKSEL_Val;  /* SPIFI Clock Selection              */
000392  2002              MOVS     r0,#2
000394  4910              LDR      r1,|L1.984|
000396  31b0              ADDS     r1,r1,#0xb0
000398  6008              STR      r0,[r1,#0]
;;;553      LPC_SC->PCLKSEL   = PCLKSEL_Val;      /* Peripheral Clock Selection         */
00039a  490f              LDR      r1,|L1.984|
00039c  31a4              ADDS     r1,r1,#0xa4
00039e  6008              STR      r0,[r1,#0]
;;;554      LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
0003a0  4818              LDR      r0,|L1.1028|
0003a2  490d              LDR      r1,|L1.984|
0003a4  3940              SUBS     r1,r1,#0x40
0003a6  6008              STR      r0,[r1,#0]
;;;555      LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
0003a8  1588              ASRS     r0,r1,#22
0003aa  4910              LDR      r1,|L1.1004|
0003ac  f8c101c8          STR      r0,[r1,#0x1c8]
;;;556    #endif
;;;557    
;;;558      LPC_SC->PBOOST 	|= 0x03;			/* Power Boost control				*/
0003b0  4608              MOV      r0,r1
0003b2  f8d001b0          LDR      r0,[r0,#0x1b0]
0003b6  f0400003          ORR      r0,r0,#3
0003ba  4907              LDR      r1,|L1.984|
0003bc  31ac              ADDS     r1,r1,#0xac
0003be  6008              STR      r0,[r1,#0]
;;;559    
;;;560    #if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
;;;561      LPC_SC->FLASHCFG  = FLASHCFG_Val|0x03A;
0003c0  f245003a          MOV      r0,#0x503a
0003c4  4909              LDR      r1,|L1.1004|
0003c6  6008              STR      r0,[r1,#0]
;;;562    #endif
;;;563    #ifndef __CODE_RED
;;;564    #ifdef  __RAM_MODE__
;;;565      SCB->VTOR  = 0x10000000 & 0x3FFFFF80;
0003c8  f04f5080          MOV      r0,#0x10000000
0003cc  4909              LDR      r1,|L1.1012|
0003ce  3980              SUBS     r1,r1,#0x80
0003d0  6008              STR      r0,[r1,#0]
;;;566    #else
;;;567      SCB->VTOR  = 0x00000000 & 0x3FFFFF80;
;;;568    #endif
;;;569    #endif
;;;570      SystemCoreClockUpdate();
0003d2  f7fffffe          BL       SystemCoreClockUpdate
;;;571    }
0003d6  bd00              POP      {pc}
                          ENDP

                  |L1.984|
                          DCD      0x400fc104
                  |L1.988|
                          DCD      0x00b71b00
                  |L1.992|
                          DCD      SystemCoreClock
                  |L1.996|
                          DCD      PeripheralClock
                  |L1.1000|
                          DCD      EMCClock
                  |L1.1004|
                          DCD      0x400fc000
                  |L1.1008|
                          DCD      USBClock
                  |L1.1012|
                          DCD      0xe000ed88
                  |L1.1016|
                          DCD      0xe000ef40
                  |L1.1020|
                          DCD      0x10110021
                  |L1.1024|
                          DCD      0x11000011
                  |L1.1028|
                          DCD      0x042887de

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x07270e00
                  PeripheralClock
                          DCD      0x03938700
                  EMCClock
                          DCD      0x03938700
                  USBClock
                          DCD      0x02dc6c00

;*** Start embedded assembler ***

#line 1 "Core\\Device\\NXP\\LPC407x_8x_177x_8x\\Source\\Templates\\system_LPC407x_8x_177x_8x.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___27_system_LPC407x_8x_177x_8x_c_5d646a67____REV16|
#line 115 ".\\Core\\CMSIS\\Include\\core_cmInstr.h"
|__asm___27_system_LPC407x_8x_177x_8x_c_5d646a67____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___27_system_LPC407x_8x_177x_8x_c_5d646a67____REVSH|
#line 129
|__asm___27_system_LPC407x_8x_177x_8x_c_5d646a67____REVSH| PROC
#line 130

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
