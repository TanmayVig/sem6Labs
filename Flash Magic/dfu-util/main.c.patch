--- C:/Users/Andy/AppData/Local/Temp/main.c-rev4711.svn000.tmp.c	Fri Jul 14 15:09:39 2017
+++ C:/Users/Andy/AppData/Local/Temp/main.c-rev4712.svn000.tmp.c	Fri Jul 14 16:09:57 2017
@@ -166 +166,2 @@ static void help(void)
-		"  -l --list\t\t\tList currently attached DFU capable devices\n");
+		"  -l --list\t\t\tList currently attached DFU capable devices\n"
+    "  -m --mass-mode\t\tUpdates all matching devices (don't specify a serial number or path)\n");
@@ -194,0 +196 @@ static void print_version(void)
+         "Mass mode added by ESAcademy, Inc. 2017\n"
@@ -202,0 +205 @@ static struct option opts[] = {
+  { "mass-mode", 0, 0, 'm' },
@@ -224 +227,13 @@ static struct option opts[] = {
-int main(int argc, char **argv)
+// performs the dfu update on a device
+static void dfu_device
+  (
+  struct dfu_if *device,                                   // the device to operate on
+  libusb_context *ctx,
+  int detach_delay,
+  unsigned int transfer_size,
+  const char *dfuse_options,
+  int expected_size,
+  int final_reset,
+  enum mode mode,
+  struct dfu_file file
+  )
@@ -226,3 +241,3 @@ static struct option opts[] = {
-	int expected_size = 0;
-	unsigned int transfer_size = 0;
-	enum mode mode = MODE_NONE;
+	int ret;
+	uint16_t runtime_vendor;
+	uint16_t runtime_product;
@@ -230,5 +244,0 @@ static struct option opts[] = {
-	libusb_context *ctx;
-	struct dfu_file file;
-	char *end;
-	int final_reset = 0;
-	int ret;
@@ -237,4 +246,0 @@ static struct option opts[] = {
-	const char *dfuse_options = NULL;
-	int detach_delay = 5;
-	uint16_t runtime_vendor;
-	uint16_t runtime_product;
@@ -242 +248 @@ static struct option opts[] = {
-	memset(&file, 0, sizeof(file));
+	/* We have exactly one device. Its libusb_device is now in device->dev */
@@ -244,142 +249,0 @@ static struct option opts[] = {
-	/* make sure all prints are flushed */
-	setvbuf(stdout, NULL, _IONBF, 0);
-
-	while (1) {
-		int c, option_index = 0;
-		c = getopt_long(argc, argv, "hVvleE:d:p:c:i:a:S:t:U:D:Rs:Z:", opts,
-				&option_index);
-		if (c == -1)
-			break;
-
-		switch (c) {
-		case 'h':
-			help();
-			break;
-		case 'V':
-			mode = MODE_VERSION;
-			break;
-		case 'v':
-			verbose++;
-			break;
-		case 'l':
-			mode = MODE_LIST;
-			break;
-		case 'e':
-			mode = MODE_DETACH;
-			break;
-		case 'E':
-			detach_delay = parse_number("detach-delay", optarg);
-			break;
-		case 'd':
-			parse_vendprod(optarg);
-			break;
-		case 'p':
-#if (defined(LIBUSB_API_VERSION) && LIBUSB_API_VERSION >= 0x01000102) || (defined(LIBUSBX_API_VERSION) && LIBUSBX_API_VERSION >= 0x01000102)
-			match_path = optarg;
-#else
-			errx(EX_SOFTWARE, "This dfu-util was built without USB path support");
-#endif
-			break;
-		case 'c':
-			/* Configuration */
-			match_config_index = parse_number("cfg", optarg);
-			break;
-		case 'i':
-			/* Interface */
-			match_iface_index = parse_number("intf", optarg);
-			break;
-		case 'a':
-			/* Interface Alternate Setting */
-			match_iface_alt_index = strtoul(optarg, &end, 0);
-			if (*end) {
-				match_iface_alt_name = optarg;
-				match_iface_alt_index = -1;
-			}
-			break;
-		case 'S':
-			parse_serial(optarg);
-			break;
-		case 't':
-			transfer_size = parse_number("transfer-size", optarg);
-			break;
-		case 'U':
-			mode = MODE_UPLOAD;
-			file.name = optarg;
-			break;
-		case 'Z':
-			expected_size = parse_number("upload-size", optarg);
-			break;
-		case 'D':
-			mode = MODE_DOWNLOAD;
-			file.name = optarg;
-			break;
-		case 'R':
-			final_reset = 1;
-			break;
-		case 's':
-			dfuse_options = optarg;
-			break;
-		default:
-			help();
-			break;
-		}
-	}
-
-	print_version();
-	if (mode == MODE_VERSION) {
-		exit(0);
-	}
-
-	if (mode == MODE_NONE) {
-		fprintf(stderr, "You need to specify one of -D or -U\n");
-		help();
-	}
-
-	if (match_config_index == 0) {
-		/* Handle "-c 0" (unconfigured device) as don't care */
-		match_config_index = -1;
-	}
-
-	if (mode == MODE_DOWNLOAD) {
-		dfu_load_file(&file, MAYBE_SUFFIX, MAYBE_PREFIX);
-		/* If the user didn't specify product and/or vendor IDs to match,
-		 * use any IDs from the file suffix for device matching */
-		if (match_vendor < 0 && file.idVendor != 0xffff) {
-			match_vendor = file.idVendor;
-			printf("Match vendor ID from file: %04x\n", match_vendor);
-		}
-		if (match_product < 0 && file.idProduct != 0xffff) {
-			match_product = file.idProduct;
-			printf("Match product ID from file: %04x\n", match_product);
-		}
-	}
-
-	ret = libusb_init(&ctx);
-	if (ret)
-		errx(EX_IOERR, "unable to initialize libusb: %s", libusb_error_name(ret));
-
-	if (verbose > 2) {
-		libusb_set_debug(ctx, 255);
-	}
-
-	probe_devices(ctx);
-
-	if (mode == MODE_LIST) {
-		list_dfu_interfaces();
-		exit(0);
-	}
-
-	if (dfu_root == NULL) {
-		errx(EX_IOERR, "No DFU capable USB device available");
-	} else if (dfu_root->next != NULL) {
-		/* We cannot safely support more than one DFU capable device
-		 * with same vendor/product ID, since during DFU we need to do
-		 * a USB bus reset, after which the target device will get a
-		 * new address */
-		errx(EX_IOERR, "More than one DFU capable USB device found! "
-		       "Try `--list' and specify the serial number "
-		       "or disconnect all but one device\n");
-	}
-
-	/* We have exactly one device. Its libusb_device is now in dfu_root->dev */
-
@@ -387,2 +251,2 @@ static struct option opts[] = {
-	ret = libusb_open(dfu_root->dev, &dfu_root->dev_handle);
-	if (ret || !dfu_root->dev_handle)
+	ret = libusb_open(device->dev, &device->dev_handle);
+	if (ret || !device->dev_handle)
@@ -391 +255 @@ static struct option opts[] = {
-	printf("ID %04x:%04x\n", dfu_root->vendor, dfu_root->product);
+	printf("ID %04x:%04x\n", device->vendor, device->product);
@@ -394 +258 @@ static struct option opts[] = {
-	       libusb_le16_to_cpu(dfu_root->func_dfu.bcdDFUVersion));
+	       libusb_le16_to_cpu(device->func_dfu.bcdDFUVersion));
@@ -397 +261 @@ static struct option opts[] = {
-	if (!(dfu_root->flags & DFU_IFF_DFU)) {
+	if (!(device->flags & DFU_IFF_DFU)) {
@@ -404,2 +268,2 @@ static struct option opts[] = {
-		runtime_vendor = dfu_root->vendor;
-		runtime_product = dfu_root->product;
+		runtime_vendor = device->vendor;
+		runtime_product = device->product;
@@ -408 +272 @@ static struct option opts[] = {
-		ret = libusb_claim_interface(dfu_root->dev_handle, dfu_root->interface);
+		ret = libusb_claim_interface(device->dev_handle, device->interface);
@@ -411 +275 @@ static struct option opts[] = {
-				dfu_root->interface, libusb_error_name(ret));
+				device->interface, libusb_error_name(ret));
@@ -414 +278 @@ static struct option opts[] = {
-		ret = libusb_set_interface_alt_setting(dfu_root->dev_handle, dfu_root->interface, 0);
+		ret = libusb_set_interface_alt_setting(device->dev_handle, device->interface, 0);
@@ -421 +285 @@ static struct option opts[] = {
-		err = dfu_get_status(dfu_root, &status);
+		err = dfu_get_status(device, &status);
@@ -441,2 +305,2 @@ static struct option opts[] = {
-			if (dfu_detach(dfu_root->dev_handle,
-				       dfu_root->interface, 1000) < 0) {
+			if (dfu_detach(device->dev_handle,
+				       device->interface, 1000) < 0) {
@@ -445 +309 @@ static struct option opts[] = {
-			if (dfu_root->func_dfu.bmAttributes & USB_DFU_WILL_DETACH) {
+			if (device->func_dfu.bmAttributes & USB_DFU_WILL_DETACH) {
@@ -449 +313 @@ static struct option opts[] = {
-				ret = libusb_reset_device(dfu_root->dev_handle);
+				ret = libusb_reset_device(device->dev_handle);
@@ -457,2 +321,2 @@ static struct option opts[] = {
-			if (dfu_clear_status(dfu_root->dev_handle,
-					     dfu_root->interface) < 0) {
+			if (dfu_clear_status(device->dev_handle,
+					     device->interface) < 0) {
@@ -464,2 +328,2 @@ static struct option opts[] = {
-			libusb_release_interface(dfu_root->dev_handle,
-			    dfu_root->interface);
+			libusb_release_interface(device->dev_handle,
+			    device->interface);
@@ -468,4 +332,4 @@ static struct option opts[] = {
-		libusb_release_interface(dfu_root->dev_handle,
-					 dfu_root->interface);
-		libusb_close(dfu_root->dev_handle);
-		dfu_root->dev_handle = NULL;
+		libusb_release_interface(device->dev_handle,
+					 device->interface);
+		libusb_close(device->dev_handle);
+		device->dev_handle = NULL;
@@ -489 +353 @@ static struct option opts[] = {
-		if (dfu_root == NULL) {
+		if (device == NULL) {
@@ -491 +355 @@ static struct option opts[] = {
-		} else if (dfu_root->next != NULL) {
+		} else if (device->next != NULL) {
@@ -498 +362 @@ static struct option opts[] = {
-		if (!(dfu_root->flags | DFU_IFF_DFU))
+		if (!(device->flags | DFU_IFF_DFU))
@@ -502,2 +366,2 @@ static struct option opts[] = {
-		ret = libusb_open(dfu_root->dev, &dfu_root->dev_handle);
-		if (ret || !dfu_root->dev_handle) {
+		ret = libusb_open(device->dev, &device->dev_handle);
+		if (ret || !device->dev_handle) {
@@ -511,2 +375,2 @@ static struct option opts[] = {
-		runtime_vendor = match_vendor < 0 ? dfu_root->vendor : match_vendor;
-		runtime_product = match_product < 0 ? dfu_root->product : match_product;
+		runtime_vendor = match_vendor < 0 ? device->vendor : match_vendor;
+		runtime_product = match_product < 0 ? device->product : match_product;
@@ -517,2 +381,2 @@ dfustate:
-	printf("Setting Configuration %u...\n", dfu_root->configuration);
-	ret = libusb_set_configuration(dfu_root->dev_handle, dfu_root->configuration);
+	printf("Setting Configuration %u...\n", device->configuration);
+	ret = libusb_set_configuration(device->dev_handle, device->configuration);
@@ -524 +388 @@ dfustate:
-	ret = libusb_claim_interface(dfu_root->dev_handle, dfu_root->interface);
+	ret = libusb_claim_interface(device->dev_handle, device->interface);
@@ -529,2 +393,2 @@ dfustate:
-	printf("Setting Alternate Setting #%d ...\n", dfu_root->altsetting);
-	ret = libusb_set_interface_alt_setting(dfu_root->dev_handle, dfu_root->interface, dfu_root->altsetting);
+	printf("Setting Alternate Setting #%d ...\n", device->altsetting);
+	ret = libusb_set_interface_alt_setting(device->dev_handle, device->interface, device->altsetting);
@@ -537 +401 @@ status_again:
-	ret = dfu_get_status(dfu_root, &status );
+	ret = dfu_get_status(device, &status );
@@ -553 +417 @@ status_again:
-		if (dfu_clear_status(dfu_root->dev_handle, dfu_root->interface) < 0) {
+		if (dfu_clear_status(device->dev_handle, device->interface) < 0) {
@@ -561 +425 @@ status_again:
-		if (dfu_abort(dfu_root->dev_handle, dfu_root->interface) < 0) {
+		if (dfu_abort(device->dev_handle, device->interface) < 0) {
@@ -577 +441 @@ status_again:
-		if (dfu_clear_status(dfu_root->dev_handle, dfu_root->interface) < 0)
+		if (dfu_clear_status(device->dev_handle, device->interface) < 0)
@@ -579 +443 @@ status_again:
-		if (dfu_get_status(dfu_root, &status) < 0)
+		if (dfu_get_status(device, &status) < 0)
@@ -588 +452 @@ status_again:
-	       libusb_le16_to_cpu(dfu_root->func_dfu.bcdDFUVersion));
+	       libusb_le16_to_cpu(device->func_dfu.bcdDFUVersion));
@@ -590 +454 @@ status_again:
-	if (dfu_root->func_dfu.bcdDFUVersion == libusb_cpu_to_le16(0x11a))
+	if (device->func_dfu.bcdDFUVersion == libusb_cpu_to_le16(0x11a))
@@ -596 +460 @@ status_again:
-		    dfu_root->func_dfu.wTransferSize);
+		    device->func_dfu.wTransferSize);
@@ -616,2 +480,2 @@ status_again:
-	if (transfer_size < dfu_root->bMaxPacketSize0) {
-		transfer_size = dfu_root->bMaxPacketSize0;
+	if (transfer_size < device->bMaxPacketSize0) {
+		transfer_size = device->bMaxPacketSize0;
@@ -629 +493 @@ status_again:
-		    if (dfuse_do_upload(dfu_root, transfer_size, fd,
+		    if (dfuse_do_upload(device, transfer_size, fd,
@@ -633 +497 @@ status_again:
-		    if (dfuload_do_upload(dfu_root, transfer_size,
+		    if (dfuload_do_upload(device, transfer_size,
@@ -644,2 +508,2 @@ status_again:
-		    ((file.idVendor  != 0xffff && file.idVendor  != dfu_root->vendor) ||
-		     (file.idProduct != 0xffff && file.idProduct != dfu_root->product))) {
+		    ((file.idVendor  != 0xffff && file.idVendor  != device->vendor) ||
+		     (file.idProduct != 0xffff && file.idProduct != device->product))) {
@@ -650 +514 @@ status_again:
-				dfu_root->vendor, dfu_root->product);
+				device->vendor, device->product);
@@ -653 +517 @@ status_again:
-		        if (dfuse_do_dnload(dfu_root, transfer_size, &file,
+		        if (dfuse_do_dnload(device, transfer_size, &file,
@@ -657 +521 @@ status_again:
-			if (dfuload_do_dnload(dfu_root, transfer_size, &file) < 0)
+			if (dfuload_do_dnload(device, transfer_size, &file) < 0)
@@ -662 +526 @@ status_again:
-		if (dfu_detach(dfu_root->dev_handle, dfu_root->interface, 1000) < 0) {
+		if (dfu_detach(device->dev_handle, device->interface, 1000) < 0) {
@@ -672 +536 @@ status_again:
-		if (dfu_detach(dfu_root->dev_handle, dfu_root->interface, 1000) < 0) {
+		if (dfu_detach(device->dev_handle, device->interface, 1000) < 0) {
@@ -678 +542 @@ status_again:
-		ret = libusb_reset_device(dfu_root->dev_handle);
+		ret = libusb_reset_device(device->dev_handle);
@@ -684,2 +548,182 @@ status_again:
-	libusb_close(dfu_root->dev_handle);
-	dfu_root->dev_handle = NULL;
+	libusb_close(device->dev_handle);
+	device->dev_handle = NULL;
+}
+
+int main(int argc, char **argv)
+{
+	int expected_size = 0;
+	unsigned int transfer_size = 0;
+	enum mode mode = MODE_NONE;
+	libusb_context *ctx;
+	struct dfu_file file;
+	char *end;
+	int final_reset = 0;
+	int ret;
+	const char *dfuse_options = NULL;
+	int detach_delay = 5;
+  struct dfu_if *pdfu;
+  int mass_mode = FALSE;
+
+	memset(&file, 0, sizeof(file));
+
+	/* make sure all prints are flushed */
+	setvbuf(stdout, NULL, _IONBF, 0);
+
+	while (1) {
+		int c, option_index = 0;
+		c = getopt_long(argc, argv, "hVvmleE:d:p:c:i:a:S:t:U:D:Rs:Z:", opts,
+				&option_index);
+		if (c == -1)
+			break;
+
+		switch (c) {
+		case 'h':
+			help();
+			break;
+		case 'V':
+			mode = MODE_VERSION;
+			break;
+		case 'v':
+			verbose++;
+			break;
+    case 'm':
+      mass_mode = TRUE;
+      break;
+		case 'l':
+			mode = MODE_LIST;
+			break;
+		case 'e':
+			mode = MODE_DETACH;
+			break;
+		case 'E':
+			detach_delay = parse_number("detach-delay", optarg);
+			break;
+		case 'd':
+			parse_vendprod(optarg);
+			break;
+		case 'p':
+#if (defined(LIBUSB_API_VERSION) && LIBUSB_API_VERSION >= 0x01000102) || (defined(LIBUSBX_API_VERSION) && LIBUSBX_API_VERSION >= 0x01000102)
+			match_path = optarg;
+#else
+			errx(EX_SOFTWARE, "This dfu-util was built without USB path support");
+#endif
+			break;
+		case 'c':
+			/* Configuration */
+			match_config_index = parse_number("cfg", optarg);
+			break;
+		case 'i':
+			/* Interface */
+			match_iface_index = parse_number("intf", optarg);
+			break;
+		case 'a':
+			/* Interface Alternate Setting */
+			match_iface_alt_index = strtoul(optarg, &end, 0);
+			if (*end) {
+				match_iface_alt_name = optarg;
+				match_iface_alt_index = -1;
+			}
+			break;
+		case 'S':
+			parse_serial(optarg);
+			break;
+		case 't':
+			transfer_size = parse_number("transfer-size", optarg);
+			break;
+		case 'U':
+			mode = MODE_UPLOAD;
+			file.name = optarg;
+			break;
+		case 'Z':
+			expected_size = parse_number("upload-size", optarg);
+			break;
+		case 'D':
+			mode = MODE_DOWNLOAD;
+			file.name = optarg;
+			break;
+		case 'R':
+			final_reset = 1;
+			break;
+		case 's':
+			dfuse_options = optarg;
+			break;
+		default:
+			help();
+			break;
+		}
+	}
+
+	print_version();
+	if (mode == MODE_VERSION) {
+		exit(0);
+	}
+
+	if (mode == MODE_NONE) {
+		fprintf(stderr, "You need to specify one of -D or -U\n");
+		help();
+	}
+
+	if (match_config_index == 0) {
+		/* Handle "-c 0" (unconfigured device) as don't care */
+		match_config_index = -1;
+	}
+
+	if (mode == MODE_DOWNLOAD) {
+		dfu_load_file(&file, MAYBE_SUFFIX, MAYBE_PREFIX);
+		/* If the user didn't specify product and/or vendor IDs to match,
+		 * use any IDs from the file suffix for device matching */
+		if (match_vendor < 0 && file.idVendor != 0xffff) {
+			match_vendor = file.idVendor;
+			printf("Match vendor ID from file: %04x\n", match_vendor);
+		}
+		if (match_product < 0 && file.idProduct != 0xffff) {
+			match_product = file.idProduct;
+			printf("Match product ID from file: %04x\n", match_product);
+		}
+	}
+
+	ret = libusb_init(&ctx);
+	if (ret)
+		errx(EX_IOERR, "unable to initialize libusb: %s", libusb_error_name(ret));
+
+	if (verbose > 2) {
+		libusb_set_debug(ctx, 255);
+	}
+
+	probe_devices(ctx);
+
+	if (mode == MODE_LIST) {
+		list_dfu_interfaces();
+		exit(0);
+	}
+
+  if (dfu_root == NULL) {
+		errx(EX_IOERR, "No DFU capable USB device available");
+	} else if (dfu_root->next != NULL) {
+
+    if (mass_mode == TRUE)
+    {
+      // update all devices found
+      for (pdfu = dfu_root; pdfu != NULL; pdfu = pdfu->next)
+      {
+        dfu_device(pdfu, ctx, detach_delay, transfer_size, dfuse_options, expected_size, final_reset, mode, file);
+      }
+    }
+    else
+    {
+      /* We cannot safely support more than one DFU capable device
+		   * with same vendor/product ID, since during DFU we need to do
+		   * a USB bus reset, after which the target device will get a
+		   * new address */
+		  errx(EX_IOERR, "More than one DFU capable USB device found! "
+		         "Try `--list' and specify the serial number "
+		         "or disconnect all but one device "
+             "or enable mass-mode\n");
+    }
+	}
+  else
+  {
+    // update the only device found
+    dfu_device(dfu_root, ctx, detach_delay, transfer_size, dfuse_options, expected_size, final_reset, mode, file);
+  }
+
@@ -688 +732 @@ status_again:
-	return (0);
+  return (0);
